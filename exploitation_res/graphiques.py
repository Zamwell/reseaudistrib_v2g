# -*- coding: utf-8 -*-
"""
Created on Wed Sep 25 13:31:23 2019

@author: Utilisateur
"""

import os
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np

def plot_graph(output_dir, table, variable, y_label = "", title="", drop = []):
    table_file = os.path.join(output_dir, table, variable)
    df = pd.read_csv(table_file, index_col=[0], sep = ";")
    drop_str = [str(nom) for nom in drop]
    dfi = df.drop(drop_str, axis = 1)
    dfi.plot(label = variable[:-4])
    plt.xlabel("time step")
    plt.ylabel(y_label)
    plt.title(title)
    plt.grid()
    plt.show()


def plot_soc_noeud(output_dir,table, variable, net_storage):
    table_file = os.path.join(output_dir, table, variable)
    for bus in net_storage.bus.unique():
        df = pd.read_csv(table_file, index_col=[0], sep = ";")
        drop = net_storage[net_storage.bus != bus].index.values
        drop_str = [str(nom) for nom in drop]
        dfi = df.drop(drop_str, axis = 1)
        dfi.plot(legend = None)
        plt.xlabel("time step")
        plt.ylabel(" State Of Charge [%]")
        plt.title("SOC EV au noeud " + str(bus))
        plt.grid()
        plt.show()


def plot_df(df, ylab = "", title = "", drop = []):
    df.drop(drop, axis = 1).plot()
    plt.xlabel("time step")
    plt.ylabel(ylab)
    plt.title(title)
    plt.grid()
    plt.show()
    
        
def plot_bat_eq_ps(output_dir,table, variable, net_storage):
    table_file = os.path.join(output_dir, table, variable)
    df = pd.read_csv(table_file, index_col=[0], sep = ";")
    df_bat_eq = df['somme_in_service_glob'] * 0.05
    df_bat_eq.plot()
    plt.xlabel("time step")
    plt.ylabel(" State Of Charge [%]")
    plt.title("SOC EV global en service")
    plt.grid()
    plt.show()        


def plot_soc_noeud_unique(output_dir,table, variable, net_storage, bus):
    table_file = os.path.join(output_dir, table, variable)
    df = pd.read_csv(table_file, index_col=[0], sep = ";")
    drop = net_storage[net_storage.bus != bus].index.values
    drop_str = [str(nom) for nom in drop]
    drop_str.append("somme_in_service_glob")
    dfi = df.drop(drop_str, axis = 1)
    dfi.plot(legend = None)
    plt.xlabel("time step")
    plt.ylabel(" State Of Charge [%]")
    plt.title("SOC EV au noeud " + str(bus))
    plt.grid()
    plt.show()

def plot_ajout_charge(output_dir,table,variable,net_storage):
    table_file = os.path.join(output_dir, table, variable)
    table_bus = os.path.join(output_dir, table, "bus.csv")
    df_aj_charg = pd.DataFrame()
    df = pd.read_csv(table_file,index_col = [0], sep = ";")
    df_bus = pd.read_csv(table_bus, index_col = [0], sep = ";")
    df_tu = pd.DataFrame(np.rec.fromarrays((df.values, df_bus.values)).tolist(),
                             columns = df.columns, index = df.index)
    for bus in net_storage.bus.unique():
        df_som_inserv = df_tu.applymap(lambda tu : tu[0] if (tu[1] == bus) else 0)
        df_aj_charg[str(bus)] = df_som_inserv.sum(axis = 1)
    plot_df(df_aj_charg, "P [MW]","Courbe de charge des EV")
        
    
def plot_pertes(output_dir):
    table_file = os.path.join(output_dir, "res_line", "pl_mw.csv")
    df = pd.read_csv(table_file, index_col = [0], sep = ";")
    df = df/4
    df_sum = pd.DataFrame()
    df_sum['Total'] = df.sum(axis=1)
    plot_df(df_sum,"Losses (MWh)", "Grid Losses")
    return df_sum

def comp_pertes(df_base, df_ev):
    df_agg = pd.concat([df_base, df_ev], axis = 1)
    plot_df(df_agg,"Losses (MWh)","Grid Losses")
    (som_base, som_ev) = (df_base.sum().values[0], df_ev.sum().values[0])
    print("Pertes sans EV : " + str(np.round(som_base,3)) + "MWh")
    print("Pertes avec EV : " + str(np.round(som_ev,3)) + "MWh")
    print("Augmentation  : " + str(np.round((som_ev/som_base-1)*100,3)) + "%")
    